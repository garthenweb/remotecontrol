import sendSignal from '../../sender/power';
import { Device as YeelightDevice } from 'yeelight.js';
import TuyAPI from 'tuyapi';
import {
  POWER_STATE_CHANGE,
  UPSERT as DEVICE_UPSERT,
} from '../../../react/src/actions/device';
import createDevice, { POWER_ON } from '../../../react/src/domain/Device';

const sendSignalByType = async (settings, signal) => {
  switch (settings.type) {
    case 'elro_power':
      sendSignal(signal, settings);
      break;
    case 'yeelight': {
      const light = new YeelightDevice(settings);
      light.powerOn(signal, 'smooth', 1000).catch(() => light.socket.destroy());
      break;
    }
    case 'tuya_power': {
      // {id:String, key: string} generated by tuya-cli wizard
      // see https://github.com/codetheweb/tuyapi/blob/master/docs/SETUP.md#listing-tuya-devices-from-the-tuya-smart-or-smart-life-apps
      const device = new TuyAPI({
        id: settings.id,
        key: settings.key,
        ip: settings.ip,
        version: settings.version,
        issueRefreshOnConnect: settings.issueRefreshOnConnect,
      });
      device.on('error', (err) => {
        console.error(err);
      });
      try {
        const found = await device.find();
        if (found) {
          await device.connect();
          await device.set({ set: signal === 'on' });
          device.disconnect();
        }
      } catch (err) {
        console.error(err);
        device.disconnect();
      }

      break;
    }
  }
};

const middleware = (store) => (next) => (action) => {
  switch (action.type) {
    case POWER_STATE_CHANGE:
    case DEVICE_UPSERT: {
      next(action);
      const device = store.getState().devices[action.meta.id];
      if (device.props.power) {
        sendSignalByType(
          device.settings,
          device.power === POWER_ON ? 'on' : 'off'
        );
      }
      break;
    }

    default:
      next(action);
  }
};

export default middleware;
